"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElementScroller = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ScrollManager = require("./ScrollManager");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ManagedElementScroller extends _react.default.Component {
  constructor(props) {
    super(props);
    this._ref = /*#__PURE__*/_react.default.createRef();
  }

  componentDidMount() {
    this._register();
  }

  componentWillUnmount() {
    this._unregister(this.props);
  }

  componentDidUpdate(prevProps) {
    this._unregister(prevProps);

    this._register();
  }

  _register() {
    const _this$props = this.props,
          manager = _this$props.manager,
          scrollKey = _this$props.scrollKey;
    const node = this._ref.current;

    if (!manager) {
      console.warn('ElementScroller only works when nested within a ScrollManager'); // eslint-disable-line no-console
    } else if (scrollKey && node) {
      manager._registerElement(scrollKey, node);
    }
  }

  _unregister(props) {
    const manager = props.manager,
          scrollKey = props.scrollKey;

    if (manager && scrollKey) {
      manager._unregisterElement(scrollKey);
    }
  }

  render() {
    return /*#__PURE__*/_react.default.cloneElement(_react.default.Children.only(this.props.children), {
      ref: this._ref
    });
  }

}

ManagedElementScroller.propTypes = {
  manager: _propTypes.default.instanceOf(_ScrollManager.ScrollManager).isRequired,
  scrollKey: _propTypes.default.string.isRequired,
  children: _propTypes.default.element.isRequired
};
const ElementScroller = (0, _ScrollManager.withManager)(ManagedElementScroller);
exports.ElementScroller = ElementScroller;